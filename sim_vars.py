import numpy as np
from pathlib import Path

# ======================== MODEL PARAMS =====================
# After modifying each one of these params, it is highly recommended to regenerate data
# by using init_data or init_and_run_simulation

NEW_WEIGHT_RATIO = 2  # In paper, mu_e
observation_cov = 0.01  # In paper, sigma_rel
epsilon = 0.25
A = 0.1
# ^ For compatibility with older versions, this is called obs_cov but is really the std_dev of the measurements errors
NB_ENSEMBLES = 10
INIT_STD_DEV = 0.05  # In paper, sigma_e
REINIT_STD_DEV = 0.000
t_start_iter = 0
t_end_iter = 1950
N_o = 2
observation_locations = [
    (12, 4),
    (55, 27),
    (30, 20),
    (30, 25),
    (20, 20),
    (30, 15),
    (20, 10),
    (10, 20),
    (30, 19),
    (30, 21),
][:N_o]
altSeed = 2
radius_obs = np.inf  # Used for localization. Set to inf to deactivate it.

# ======================== OTHER PARAMS =====================

GRAPH_PLOT_PERIOD = 10

PLOT_COV_MATRICES = True

MAIN_DIR_PATH = "/Users/axelpeytavin/Documents/Plastic-DA-data/"

# ======================== CONSTANTS ========================
# Be careful when modifying these

simulator_version: float = 8

MAX_LONGITUDE = 225
MIN_LONGITUDE = 195

MAX_LATITUDE = 40
MIN_LATITUDE = 20

RESOLUTION = 0.5  # "Number of degrees by box"

LONGITUDES = int((MAX_LONGITUDE - MIN_LONGITUDE) / RESOLUTION)
LATITUDES = int((MAX_LATITUDE - MIN_LATITUDE) / RESOLUTION)

TIMES = 2001  # Must be inferior to the total of days available in ref

NB_PARTS = 25000

measure_resolution = NB_PARTS / (LONGITUDES * LATITUDES) * 0.01  # In paper, sigma_0

T = list(range(t_end_iter))

# ======================== FOLDERS ========================

end_code_path = f"double_gyre_v{simulator_version}_nbparts_{NB_PARTS}_as_{altSeed}_eps_{epsilon}_A_{A}_res_{RESOLUTION}_ens_{NB_ENSEMBLES}_rad_{radius_obs}_devinit_{INIT_STD_DEV}_rsd_{REINIT_STD_DEV}_meaninit_{NEW_WEIGHT_RATIO}_obscov_{observation_cov}_obspoints{observation_locations}"

if not Path("outputs").is_dir():
    Path("outputs").mkdir()
output_dir_path = f"outputs/output_{end_code_path}/"
data_dir_path = f"{MAIN_DIR_PATH}data_{end_code_path}/"

# Have to be generated before the sim
ds_parts_useful_path = (
    f"{MAIN_DIR_PATH}parts_double_gyre_useful_{NB_PARTS}_as_{altSeed}.nc"
)

ds_parts_ref_path = f"{MAIN_DIR_PATH}parts_double_gyre_ref_eps_{epsilon}_A_{A}.nc"

# Generated by the init_data and then used in sim
ds_densities_ref_path = f"{data_dir_path}densities_{end_code_path}_ref.nc"
ds_parts_ensembles_path = f"{data_dir_path}parts_ensembles_{end_code_path}.nc"
ds_densities_ensembles_path = f"{data_dir_path}densities_ensembles_{end_code_path}.nc"
